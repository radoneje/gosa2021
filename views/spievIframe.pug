doctype html
html
    head
        title sber-pb
        <meta charset="UTF-8">
        <meta name="description" content="pb conference">
        <meta name="keywords" content="sber-pb">
        <meta name="author" content="">
        <meta name="viewport" content="viewport-fit=cover, width=device-width, initial-scale=1.0, maximum-scale=1.0">

        <link href="/favicon.ico" rel="shortcut icon" >

        <meta name="theme-color" content="#ffffff">
        <meta property="og:locale" content="ru_RU">
        <meta property="og:type" content="website" />
        <meta property="og:url" content="https://front.sber.link/" />
        meta(property="og:title" content="SPIEF player")
        <script async src="https://www.googletagmanager.com/gtag/js?id=UA-88562228-1"></script>

        <link href=" /stylesheets/reset.css" rel="stylesheet" />
        <link href=" /lib/video-js.css" rel="stylesheet" />
        <link href=" /stylesheets/style.css" rel="stylesheet" />
        script.
            try {
                eval("let a=()=>{;;};")
            } catch (e) {
                console.log(e)
                document.location.href = "/badbrowser.html"
            }
    body(style="overflow: hidden;")
        .videoWrapper(style="overflow: hidden")
            //video(width="1280" height="720" controrls)
            //video#my-video(controls loop style="overflow: hidden"  width="1280" height="720" class="video-js vjs-big-play-centered" playsinline poster=item.poster)
                source( src="/test.mp4" type="video/mp4")
                //source( src="https://hls-fabrikanews.cdnvideo.ru/fabrikanews4/_"+hall+lang+"/playlist.m3u8" type="application/x-mpegURL")


        script(src="/lib/video.js")
        script(src="/lib/axios.min.js")
        script.
            // = videojs('my-video')
        script.
            var player;
            var clientid = null;
            var id = !{JSON.stringify(item.id)};
            var lang = !{JSON.stringify(item.lang)};
            var status = !{JSON.stringify(item.status)};
            var poster = !{JSON.stringify(item.poster)};
            var url = !{JSON.stringify(item.url)};
            var source = !{JSON.stringify(item.source)};
            var m3u8 = !{JSON.stringify(item.m3u8)};
            var clientid = null;
            document.querySelector(".videoWrapper").style.backgroundImage = "url(" + poster + ")"
            initPlayer();
            function setUpPlayer() {

                if(player)
                    player.dispose();
                player = videojs('my-video')
                player.on("error",()=>{
                    console.log("player error")
                    setTimeout(()=>{player.load();player.play()},2000)
                })
            }
            function initPlayer() {
                console.log("initPlayer", status)

                if (status == 0) {
                    document.querySelector(".videoWrapper").innerHTML = ""
                    if (player)
                        player.dispose();
                    player=null;
                }
                ;
                if (status == 1) {
                    document.querySelector(".videoWrapper").innerHTML = '<video id="my-video" controls loop style="overflow: hidden"  width="1280" height="720" class="video-js vjs-big-play-centered" playsinline poster="' + poster + '"><source src="' + m3u8 + '" type="application/x-mpegURL"></source></video></video>';
                    setUpPlayer()
                }
                if (status == 2) {
                    document.querySelector(".videoWrapper").innerHTML = ' <video id="my-video" controls loop style="overflow: hidden"  width="1280" height="720" class="video-js vjs-big-play-centered" playsinline poster="' + poster + '"><source src="' + url + '" type="video/mp4"></source></video>';
                    setUpPlayer()
                }

            }
            sendStatus(clientid, 20 * 1000);
            async function sendStatus(clientid, timeout) {
                try {
                    var dt = await axios.post("/spief2020isAlive", {id, lang, clientid});
                    clientid = dt.data.clientid;
                    timeout = parseInt(dt.data.timeout) || timeout;
                    if ((timeout) < (10 * 1000) && (timeout) > (120 * 1000))
                        timeout = 20 * 1000;

                    if(status!=dt.data.status){
                        status=dt.data.status;
                         source = dt.data.source;
                        url = dt.data.url;
                         m3u8 = dt.data.m3u8;
                        //console.log(status,source, dt.data );
                        initPlayer();
                    }
                } catch (e) {
                    console.warn("ERROR IN SEND STATUS", e)
                }
                setTimeout(() => {
                    sendStatus(clientid, timeout)
                }, timeout);
            }
        script.
            window.dataLayer = window.dataLayer || [];
            function gtag() {
                dataLayer.push(arguments);
            }
            gtag('js', new Date());
            gtag('config', 'UA-88562228-1');
